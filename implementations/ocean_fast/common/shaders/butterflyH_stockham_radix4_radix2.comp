#define M_PI 3.1415926535897932384626433832795
#define NUM_BUTTERFLIES 1
#define FFT_SIZE 512
#define LOG_SIZE 9 // log2(FFT_SIZE)
#define HALF_LOG_SIZE 4 // log2(FFT_SIZE) / 2

layout (local_size_x = (FFT_SIZE/4)/NUM_BUTTERFLIES, local_size_y = 1) in;

// ping pong textures
layout (binding = 0, rgba32f) uniform image2DArray pingpong0;
layout (binding = 1, rgba32f) uniform image2DArray pingpong1;

vec2 complex_mult(vec2 v0, vec2 v1) {
    return vec2(v0.x * v1.x - v0.y * v1.y,
                v0.x * v1.y + v0.y * v1.x);
}

vec4 complex_mult_twice(vec2 v0, vec4 v1) {
	return vec4(v0.x * v1.x - v0.y * v1.y,
				v0.x * v1.y + v0.y * v1.x,
				v0.x * v1.z - v0.y * v1.w,
				v0.x * v1.w + v0.y * v1.z);
}

vec2 euler(float angle) {
    return vec2(cos(angle), sin(angle));
}


void main() {
	int line = int(gl_GlobalInvocationID.x);
    int column = int(gl_WorkGroupID.y);
    int pingpong = 0;
	
    for(int stage = 0; stage < HALF_LOG_SIZE; ++stage) {
		// 1. Compute Butterflies
        int n = 1 << ((HALF_LOG_SIZE - stage)*2 + 1);
        int s = 1 << (stage*2);

        int n0 = 0;
        int n1 = n/4;
        int n2 = n/2;
        int n3 = n1 + n2; // 3N/4
		
		for(int i = 0; i < NUM_BUTTERFLIES; ++i) {
            int idx = (line*NUM_BUTTERFLIES + i);
            // Compute p and q
            int p = idx / s;
            int q = idx % s;
            // Compute the twiddle factors
            vec2 w1p = euler(2 * (M_PI / n) * p);
            vec2 w2p = complex_mult(w1p,w1p);
            vec2 w3p = complex_mult(w1p,w2p);
			
			if(pingpong == 0) {
                // Compute natural order butterflies
                // 1
				vec4 a1 = imageLoad(pingpong0, ivec3(q + s*(p + n0), column, LAYER_Y_JXY_JXX_JYY));
				vec4 b1 = imageLoad(pingpong0, ivec3(q + s*(p + n1), column, LAYER_Y_JXY_JXX_JYY));
				vec4 c1 = imageLoad(pingpong0, ivec3(q + s*(p + n2), column, LAYER_Y_JXY_JXX_JYY));
				vec4 d1 = imageLoad(pingpong0, ivec3(q + s*(p + n3), column, LAYER_Y_JXY_JXX_JYY));
                // 2
				vec4 a2 = imageLoad(pingpong0, ivec3(q + s*(p + n0), column, LAYER_DX_DZ_SX_SZ));
				vec4 b2 = imageLoad(pingpong0, ivec3(q + s*(p + n1), column, LAYER_DX_DZ_SX_SZ));
				vec4 c2 = imageLoad(pingpong0, ivec3(q + s*(p + n2), column, LAYER_DX_DZ_SX_SZ));
				vec4 d2 = imageLoad(pingpong0, ivec3(q + s*(p + n3), column, LAYER_DX_DZ_SX_SZ));
                // 1
                vec4 apc1 = a1 + c1;
                vec4 amc1 = a1 - c1;
                vec4 bpd1 = b1 + d1;
                vec4 jbmd1 = complex_mult_twice(vec2(0,1), b1 - d1);
                // 2
                vec4 apc2 = a2 + c2;
                vec4 amc2 = a2 - c2;
                vec4 bpd2 = b2 + d2;
                vec4 jbmd2 = complex_mult_twice(vec2(0,1), b2 - d2);
                // 1
                imageStore(pingpong1, ivec3(q + s*(4*p + 0), column, LAYER_Y_JXY_JXX_JYY), apc1 + bpd1);
                imageStore(pingpong1, ivec3(q + s*(4*p + 1), column, LAYER_Y_JXY_JXX_JYY), complex_mult_twice(w1p, amc1 + jbmd1));
                imageStore(pingpong1, ivec3(q + s*(4*p + 2), column, LAYER_Y_JXY_JXX_JYY), complex_mult_twice(w2p, apc1 - bpd1));
                imageStore(pingpong1, ivec3(q + s*(4*p + 3), column, LAYER_Y_JXY_JXX_JYY), complex_mult_twice(w3p, amc1 - jbmd1));
                // 2
                imageStore(pingpong1, ivec3(q + s*(4*p + 0), column, LAYER_DX_DZ_SX_SZ), apc2 + bpd2);
                imageStore(pingpong1, ivec3(q + s*(4*p + 1), column, LAYER_DX_DZ_SX_SZ), complex_mult_twice(w1p, amc2 + jbmd2));
                imageStore(pingpong1, ivec3(q + s*(4*p + 2), column, LAYER_DX_DZ_SX_SZ), complex_mult_twice(w2p, apc2 - bpd2));
                imageStore(pingpong1, ivec3(q + s*(4*p + 3), column, LAYER_DX_DZ_SX_SZ), complex_mult_twice(w3p, amc2 - jbmd2));
            }
            else {
                // Compute natural order butterflies
				// 1
				vec4 a1 = imageLoad(pingpong1, ivec3(q + s*(p + n0), column, LAYER_Y_JXY_JXX_JYY));
				vec4 b1 = imageLoad(pingpong1, ivec3(q + s*(p + n1), column, LAYER_Y_JXY_JXX_JYY));
				vec4 c1 = imageLoad(pingpong1, ivec3(q + s*(p + n2), column, LAYER_Y_JXY_JXX_JYY));
				vec4 d1 = imageLoad(pingpong1, ivec3(q + s*(p + n3), column, LAYER_Y_JXY_JXX_JYY));
                // 2
				vec4 a2 = imageLoad(pingpong1, ivec3(q + s*(p + n0), column, LAYER_DX_DZ_SX_SZ));
				vec4 b2 = imageLoad(pingpong1, ivec3(q + s*(p + n1), column, LAYER_DX_DZ_SX_SZ));
				vec4 c2 = imageLoad(pingpong1, ivec3(q + s*(p + n2), column, LAYER_DX_DZ_SX_SZ));
				vec4 d2 = imageLoad(pingpong1, ivec3(q + s*(p + n3), column, LAYER_DX_DZ_SX_SZ));
                // 1
                vec4 apc1 = a1 + c1;
                vec4 amc1 = a1 - c1;
                vec4 bpd1 = b1 + d1;
                vec4 jbmd1 = complex_mult_twice(vec2(0,1), b1 - d1);
                // 2
                vec4 apc2 = a2 + c2;
                vec4 amc2 = a2 - c2;
                vec4 bpd2 = b2 + d2;
                vec4 jbmd2 = complex_mult_twice(vec2(0,1), b2 - d2);
                // 1
                imageStore(pingpong0, ivec3(q + s*(4*p + 0), column, LAYER_Y_JXY_JXX_JYY), apc1 + bpd1);
                imageStore(pingpong0, ivec3(q + s*(4*p + 1), column, LAYER_Y_JXY_JXX_JYY), complex_mult_twice(w1p, amc1 + jbmd1));
                imageStore(pingpong0, ivec3(q + s*(4*p + 2), column, LAYER_Y_JXY_JXX_JYY), complex_mult_twice(w2p, apc1 - bpd1));
                imageStore(pingpong0, ivec3(q + s*(4*p + 3), column, LAYER_Y_JXY_JXX_JYY), complex_mult_twice(w3p, amc1 - jbmd1));
                // 2
                imageStore(pingpong0, ivec3(q + s*(4*p + 0), column, LAYER_DX_DZ_SX_SZ), apc2 + bpd2);
                imageStore(pingpong0, ivec3(q + s*(4*p + 1), column, LAYER_DX_DZ_SX_SZ), complex_mult_twice(w1p, amc2 + jbmd2));
                imageStore(pingpong0, ivec3(q + s*(4*p + 2), column, LAYER_DX_DZ_SX_SZ), complex_mult_twice(w2p, apc2 - bpd2));
                imageStore(pingpong0, ivec3(q + s*(4*p + 3), column, LAYER_DX_DZ_SX_SZ), complex_mult_twice(w3p, amc2 - jbmd2));
            }
		}

		// 2. Update Variables
        pingpong = ((pingpong + 1) % 2);

        // 3. Sync by Memory Barrier
        barrier();
	}

    if(LOG_SIZE % 2 == 1) {
        int s = FFT_SIZE >> 1;
        int q = 2*line;

        // 1
        vec4 a1 = imageLoad(pingpong0, ivec3(q + 0, column, LAYER_Y_JXY_JXX_JYY));
        vec4 b1 = imageLoad(pingpong0, ivec3(q + s, column, LAYER_Y_JXY_JXX_JYY));
        // 2
        vec4 a2 = imageLoad(pingpong0, ivec3(q + 0, column, LAYER_DX_DZ_SX_SZ));
        vec4 b2 = imageLoad(pingpong0, ivec3(q + s, column, LAYER_DX_DZ_SX_SZ));
        // 1
        imageStore(pingpong1, ivec3(q + 0, column, LAYER_Y_JXY_JXX_JYY), a1 + b1);
        imageStore(pingpong1, ivec3(q + s, column, LAYER_Y_JXY_JXX_JYY), a1 - b1);
        // 2
        imageStore(pingpong1, ivec3(q + 0, column, LAYER_DX_DZ_SX_SZ), a2 + b2);
        imageStore(pingpong1, ivec3(q + s, column, LAYER_DX_DZ_SX_SZ), a2 - b2);

        // There's only SIZE/4 local threads therefore we compute 2 values
        q = 2*line + 1;
        // 1
        a1 = imageLoad(pingpong0, ivec3(q + 0, column, LAYER_Y_JXY_JXX_JYY));
        b1 = imageLoad(pingpong0, ivec3(q + s, column, LAYER_Y_JXY_JXX_JYY));
        // 2
        a2 = imageLoad(pingpong0, ivec3(q + 0, column, LAYER_DX_DZ_SX_SZ));
        b2 = imageLoad(pingpong0, ivec3(q + s, column, LAYER_DX_DZ_SX_SZ));
        // 1
        imageStore(pingpong1, ivec3(q + 0, column, LAYER_Y_JXY_JXX_JYY), a1 + b1);
        imageStore(pingpong1, ivec3(q + s, column, LAYER_Y_JXY_JXX_JYY), a1 - b1);
        // 2
        imageStore(pingpong1, ivec3(q + 0, column, LAYER_DX_DZ_SX_SZ), a2 + b2);
        imageStore(pingpong1, ivec3(q + s, column, LAYER_DX_DZ_SX_SZ), a2 - b2);
    }
}